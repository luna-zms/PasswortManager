package controller;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;

import util.CharGroup;
import util.PasswordGeneratorSettings;
import util.PasswordQualityUtil;

public class PasswordController {
    /**
     * Generate a password from a given set of generator settings,
     * using a total of {@code pgs.getLength() * pgs.getCharGroups().size()} random numbers
     * generated by an instance of {@link java.security.SecureRandom}.
     *
     * @param pgs Generator settings containing the length and the character groups to use
     *            when generating the password. Must not be null.
     * @return A string of the given length,
     * guaranteed to consist of only the characters from the given char groups.
     * @author sopr018
     */
    public String generatePassword(PasswordGeneratorSettings pgs) {
        StringBuilder sb = new StringBuilder();
        SecureRandom rng = new SecureRandom();
        List<CharGroup> charGroups = new ArrayList<>(pgs.getCharGroups());
        int countCharGroups = charGroups.size();
        for (int i = 0; i < pgs.getLength(); i++) {
            int ixCharGroup = rng.nextInt(countCharGroups);
            CharGroup group = charGroups.get(ixCharGroup);
            int ixChar = rng.nextInt(group.getChars().length);
            sb.append(group.getChars()[ixChar]);
        }
        return sb.toString();
    }

    /**
     * Method which checks a password for its quality. The returned double is an value between 0
     * and 1. The closer the double is to 1, the higher is the quality of the password.
     *
     * @param pwd password which has to be checked for its quality
     * @return a double between 0 - 1 which indicates the passwordquality
     * @author sopr012, sopr011
     */
    public double checkPasswordQuality(String pwd) {
        return PasswordQualityUtil.getNormalizedScore(pwd);
    }

}
